import numpy as np

class MuSuite(object):
    def __init__(self):
        """
        usage: 
        model = MuFit.read()  # this is model initialization
        """
        self.group = {}
        self.alpha = 1.0
        self.offset = 7
        self.interval = np.array([0,7800], dtype=int)

    def group(self,forward,backward):
        """
        usage:
        MuFit.group('2:3','1,4') # forward and backward groups for GPS &tc
        the numbers are parsed, 
        translated into histo indices (n-1, python style) 
        and stored in a dictionary of two np.arrays
        """
        # two methods: either a list, comma separated, such as 1,3,5,6 
        # or a pair of integers, separated by a colon, such as 1:3 = 1,2,3 
        # only one column is allowed, but 1, 3, 5 , 7:9 = 1, 3, 5, 7, 8, 9 is valid
        # parse it
        a={}
        for name, grouping in [('forward',forward),('backward',backward)]: 
            if grouping.find(':')==-1:
                # colon not found
                a[name] = np.array([int(s) for s in grouping.split(',')])
            else:
                # colon found
                fst = int(groupig[:grouping.find(':')])
                lst = int(grouping[grouping.find(':')+1:])
                if fst<lst:
                    a[name] = np.arange(fst,lst+1,dtype=int)
                else:
                    a[name] = np.arange(lst,fst+1,dtype=int)	
            self.group = a

    def alpha(self,alpha):
        """
        usage:
        MuFit.alpha(1.03) # alpha parameter
        stored as a double variable
        """
        self.alpha=alpha

    def interval(self,first,last):
        """
        usage:
        MuFit.interval(first,last) # first and last bin for fit
        stored as a numpy array of two, np.array([first,last], dtype=int)
        """
        self.interval=np.array([first,last], dtype=int)

    def binning(self,bin):
        """
        usage:
        MuFit.binning(bin) # integer, used only for display purposes
        stored as an integer variable
        """
        self.binning = bin

    def offset(self,offset = self.offset):
        self.offset = offset

    def save(self,path):
        """
        usage:
        import dill as pickle
        MuFit.save(path_and_filename) # 
        """
        with open(path,'wb') as f:
            pickle.dump(self, f) 
        # read back also with: 
        # import dill as pickle
        # with open('musr2py/del.pkl','r') as f:
        #     b = pickle.load(f)

    def load(self,path):
        """
        usage:
        import dill as pickle
        MuFit.load(path_and_filename) # 
        """
        with open(path,'rb') as f:
            self.__dict__.update(pickle.load(f).__dict__)



